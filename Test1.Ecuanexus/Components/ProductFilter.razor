@using System.Reflection.Metadata  
@using System.Text.Json
@using Test1.Ecuanexus.Services  
@using Test1.Ecuanexus.Client.Models  
@using static System.Net.WebRequestMethods
@inject ProductService ProductService  
@inject ILogger<ProductFilter> Logger  
@inject HttpClient Http
@rendermode InteractiveServer
<div class="product-filter-container">
    <div class="search-container">
        <input 
            type="text" 
            @bind="FilterText" 
            @bind:event="oninput" 
            placeholder="Buscar productos..." 
            class="search-input"
        />
    </div>
    
    <div class="table-container">
        <table class="product-table">  
            <thead>  
                <tr>  
                    <th class="table-header">Nombre</th>  
                    <th class="table-header">Precio</th>  
                    <th class="table-header">Stock</th>  
                    <th class="table-header">Agregar</th>  
                </tr>  
            </thead>  
            <tbody>  
                @foreach (var product in products)  
                {  
                    <tr class="table-row">  
                        <td class="table-cell">@product.Name</td>    
                        <td class="table-cell">@product.Price</td>  
                        <td class="table-cell">@product.Stock</td>  
                        <td class="table-cell">
                            <QuickStockUpdate ProductId="@product.Id" CurrentStock="@product.Stock" />
                        </td>
                    </tr>  
                }  
            </tbody>  
        </table>  
    </div>
</div>

<style>
    .product-filter-container {
        padding: 20px;
        background-color: #f8f9fa;
        border-radius: 8px;
        box-shadow: 0 2px 4px rgba(0,0,0,0.1);
        margin: 20px 0;
    }

    .search-container {
        margin-bottom: 20px;
    }

    .search-input {
        width: 100%;
        padding: 12px 16px;
        border: 2px solid #e9ecef;
        border-radius: 6px;
        font-size: 16px;
        transition: border-color 0.3s ease;
        box-sizing: border-box;
    }

    .search-input:focus {
        outline: none;
        border-color: #007bff;
        box-shadow: 0 0 0 3px rgba(0,123,255,0.1);
    }

    .table-container {
        overflow-x: auto;
        border-radius: 6px;
        box-shadow: 0 1px 3px rgba(0,0,0,0.1);
    }

    .product-table {
        width: 100%;
        border-collapse: collapse;
        background-color: white;
        border-radius: 6px;
        overflow: hidden;
    }

    .table-header {
        background-color: #007bff;
        color: white;
        padding: 15px 12px;
        text-align: left;
        font-weight: 600;
        font-size: 14px;
        text-transform: uppercase;
        letter-spacing: 0.5px;
    }

    .table-row {
        transition: background-color 0.2s ease;
    }

    .table-row:hover {
        background-color: #f8f9fa;
    }

    .table-row:nth-child(even) {
        background-color: #f8f9fa;
    }

    .table-cell {
        padding: 12px;
        border-bottom: 1px solid #e9ecef;
        font-size: 14px;
        color: #495057;
    }

    .table-cell:first-child {
        font-weight: 500;
        color: #212529;
    }
</style>

@code {  
    private List<Product> products = new List<Product>();  
    private string _filterText = "";
    
    private string FilterText
    {
        get => _filterText;
        set
        {
            if (_filterText != value)
            {
                _filterText = value;
                Console.WriteLine($"FilterText cambiado a: '{value}'");
                _ = InvokeAsync(async () => await Filter(_filterText));
            }
        }
    }

    protected override async Task OnInitializedAsync()  
    {  
        await LoadProducts();
    }  

    private async Task LoadProducts()
    {
        //cargar productos
        products = await ProductService.GetProductsAsync();
        StateHasChanged();
    }

    private async Task Filter(string filter)  
    {  
        products = await ProductService.SearchProductsAsync(filter);    
        StateHasChanged();
    }  
}
